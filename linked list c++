#include<iostream>
using namespace std;
class node{
    public:
    int data;
    node*next;
    node(int val)
    {
        data=val;next=NULL;
    }
};
void insertathead(node* &head,int val)
{
     node*n=new node(val);
     n->next=head;
     head=n;
}
void insertatend(node* &head,int val)
{
    node*n=new node(val);
    if(head==NULL)
    {
        head=n;
        return;
    }
    
    node*temp=head;
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=n;
}
void display(node*head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}
void deletehead(node* &head)
{
    node*todelete=head;
    head=head->next;
    delete todelete;
}
void deletenumber(node* &head,int val)
{
    node*temp=head;
    while(temp->next->data!=val)
    {
        temp=temp->next;
    }
    node*todelete=temp->next;
    temp->next=temp->next->next;
    delete todelete;
}
node * reverse(node*head)
{
    node* previptr=NULL;
    node* currptr=head;
    node* nextptr;
    while(currptr!=NULL)
    {
        nextptr=currptr->next;
        currptr->next=previptr;
        
        previptr=currptr;
        currptr=nextptr;
    }
    return previptr;
}
bool search(node*head,int key)
{
    node*temp=head;
    while(temp!=NULL)
    {
        if(temp->data=key)
        {
            return true;
        }
        temp=temp->next;
    }
    return false;
}
int main()
{
    node*head=NULL;
    insertatend(head,1);
    insertatend(head,2);
    insertatend(head,3);
    insertatend(head,4);
    display(head);
    insertathead(head,0);
    display(head);
    deletenumber(head,4);
    display(head);
    deletehead(head);
    display(head);
    node*newhead=reverse(head);
    display(newhead);
    cout<<search(head,3)<<endl;
}
